input {
       beats {
        port => 5044
       }
}
# Add your filters / logstash plugins configuration here
filter {
    if "FG-FG61F-6.2.3" in [tags] or "fortiCORE" in [tags] {
        kv  {}
        mutate{
            rename => ["srcip", "source.ip"]
            rename => ["dstip", "destination.ip"]
            rename => ["dstport", "destination.port"]
            rename => ["devname", "host.os.platform"]
            rename => ["action", "event.action"]
            rename => ["service", "network.protocol"]
            rename => ["policyid", "rule.id"]
            rename => ["srcitf", "src.interface.name"]
            rename => ["dstitf", "dst.interface.name"]
            rename => ["hostname", "url.domain"]
            rename => ["profile", "rule.ruleset"]
            rename => ["error", "error.message"]

        }
        geoip {
          source => "source.ip"
          target => "source.geo"
          }
        geoip {
          source => "destination.ip"
          target => "destination.geo"
        }
    }
    else if "SMB-R80.20" in [tags] or "firewallCORE" in [tags] {
        kv  {}
        mutate{
            rename => ["src", "source.ip"]
            rename => ["dst", "destination.ip"]
            rename => ["svc", "destination.port"]
            rename => ["ProductName", "host.os.platform"]
            rename => ["Action", "event.action"]
            rename => ["service_id", "network.protocol"]
            rename => ["rule_name", "rule.name"]
            rename => ["xlatesrc", "source.nat.ip"]
            rename => ["client_inbound_interface", "src.interface.name"]
            rename => ["server_inbound_interface", "dst.interface.name"]
            rename => ["resource", "url.domain"]
            rename => ["name", "network.application"]
            rename => ["properties", "service.type"]
        }
        geoip {
          source => "source.ip"
          target => "source.geo"
          }
        geoip {
          source => "destination.ip"
          target => "destination.geo"
        }
        geoip {
          source => "source.nat.ip"
          target => "source.nat.geo"
        }


    }
    cidr {
      add_tag => [ "RFC1918" ]
      address => [ "%{source.ip}", "%{destination.ip}" ]
      network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
    }
    if "RFC1918" not in [tags] {
       mutate{
          copy => { "source.ip" => "src.dns.answers.name" }
          copy => { "destination.ip" => "dst.dns.answers.name" }
        }
       dns {
         reverse => [ "src.dns.answers.name", "dst.dns.answers.name" ]
         action => "replace"
         max_retries => 1
        }
    }
}
output {
  elasticsearch {
    hosts => [ "https://elasticsearch:9200" ]
    user => "${E_USER}"
    password => "${E_PASS}"
    cacert => '/usr/share/elasticsearch/config/certificates/ca/ca.crt'
    ssl_certificate_verification => false
    index => "logstash-%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  }
}